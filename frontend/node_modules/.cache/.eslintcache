[{"/Users/benliu/econo-sentimental-analysis/frontend/src/index.js":"1","/Users/benliu/econo-sentimental-analysis/frontend/src/reportWebVitals.js":"2","/Users/benliu/econo-sentimental-analysis/frontend/src/App.js":"3","/Users/benliu/econo-sentimental-analysis/frontend/src/pages/home/Home.js":"4"},{"size":535,"mtime":1699148997411,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1699148997411,"results":"7","hashOfConfig":"6"},{"size":372,"mtime":1699176086516,"results":"8","hashOfConfig":"6"},{"size":6818,"mtime":1699198918176,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1f810tr",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/benliu/econo-sentimental-analysis/frontend/src/index.js",[],[],["25","26","27","28","29","30"],"/Users/benliu/econo-sentimental-analysis/frontend/src/reportWebVitals.js",[],[],"/Users/benliu/econo-sentimental-analysis/frontend/src/App.js",["31","32"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home/Home.js'\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/benliu/econo-sentimental-analysis/frontend/src/pages/home/Home.js",["33"],[],"import React, { useState } from 'react';\nimport axios, { all } from 'axios';\nimport './home.css'\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst companyNames = [\n    'Apple',\n    'Microsoft',\n    'Google',\n    'Amazon',\n    'Meta',\n    'Tesla',\n    'Goldman Sachs'\n  ];\n\nfunction Home() {\n  const [companyName, setCompanyName] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [combinedData, setCombinedData] = useState({\n    labels: [],\n    datasets: []\n  });\n\n  const handleInputChange = (event) => {\n    const inputValue = event.target.value;\n    setCompanyName(inputValue);\n    if (inputValue.length > 0) {\n        const regex = new RegExp(`^${inputValue}`, 'i');\n        setSuggestions(companyNames.sort().filter(v => regex.test(v)));\n      } else {\n        setSuggestions([]);\n      }\n  };\n\n  const onSuggestionClick = (value) => {\n    setCompanyName(value);\n    setSuggestions([]);\n  };\n\nconst handleKeyPress = (event) => {\n    // It will trigger by pressing the Enter key\n    if (event.key === 'Enter') {\n        runAnalysis();\n    }\n};\n\nconst runAnalysis = async () => {\n    try {\n        const quarterToArticles = getArticles();\n        const sentimentSeries = performSentimentAnalysis(quarterToArticles);\n        const allData = getAllData(sentimentSeries);\n        generateGraph(\"Close\", allData);\n\n    } catch (error) {\n        console.error('Error running analysis:', error);\n        // Handle error appropriately\n    }\n}\n\nconst getArticles = async () => {\n    try {\n        setIsSubmitted(true);\n        const response = await axios.get(`/get_articles_by_quarter?company_name=${encodeURIComponent(companyName)}`);\n        console.log(response.data);\n        return response.data;\n        // Assuming the response.data is the array of articles\n    } catch (error) {\n        console.error('Error fetching articles:', error);\n        // Handle error appropriately\n    }\n};\n\nconst performSentimentAnalysis = async (quarterToArticles) => {\n    try {\n        const sentimentResponse = await axios.post('/sentiment_analysis', {\n            \"quarter_to_articles\": quarterToArticles\n        });\n        console.log(sentimentResponse.data);\n        return sentimentResponse.data;\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      // Handle error appropriately\n    }\n  };\n\n    const getAllData = async (sentiments) => {\n        try {\n            const predictionResponse = await axios.post('/predictions', {\n                \"company_name\": companyName,\n                \"sentiments\": sentiments\n            });\n            return predictionResponse.data;\n        } catch (error) {\n        console.error('Error fetching articles:', error);\n        // Handle error appropriately\n        }\n    };\n\n    const generateGraph = async (metric, allData) => {\n        try {\n            const data = getData(metric, allData);\n            const predictions = getPredictions(metric, allData);\n            console.log(data['x_vals']);\n            console.log(predictions['x_vals']);\n            const allQuarters = data[\"x_vals\"].concat(predictions[\"x_vals\"]);\n            const dataFromDataFrame1 = {\n                datasets: [\n                  {\n                    label: data['y_label'],\n                    data: data['vals'], // This should be your actual data\n                    borderColor: 'rgb(255, 99, 132)', // Color for Dataset 1\n                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                  },\n                ],\n              };\n              \n            const dataFromDataFrame2 = {\n            datasets: [\n                {\n                label: predictions['y_label'],\n                data: predictions['vals'], // This should be your actual data\n                borderColor: 'rgb(54, 162, 235)', // Color for Dataset 2\n                backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                },\n            ],\n            };\n            setCombinedData({\n                labels: allQuarters, // make sure allQuarters is an array of labels\n                datasets: [...dataFromDataFrame1.datasets, ...dataFromDataFrame2.datasets],\n              });\n        } catch (error) {\n            console.error('Error fetching articles:', error);\n        }\n    }\n\n    const getData= async (metric, allData) => {\n        try {\n            const response = await axios.post('/get_data', {\n                \"metric\": metric,\n                \"all_data\": allData\n            });\n            return response.data;\n        } catch (error) {\n        console.error('Error fetching articles:', error);\n        // Handle error appropriately\n        }\n    };\n\n    const getPredictions= async (metric, allData) => {\n        try {\n            const response = await axios.post('/get_predictions', {\n                \"metric\": metric,\n                \"all_data\": allData\n            });\n            return response.data;\n        } catch (error) {\n        console.error('Error fetching articles:', error);\n        // Handle error appropriately\n        }\n    };\n\n  return (\n    <div className=\"homepage\">\n        <div className={`search-container ${isSubmitted ? 'at-top' : 'centered'}`}>\n            <h1 className=\"search-heading\">Input a company name below!</h1>\n            <input\n            type=\"text\"\n            value={companyName}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyPress}\n            placeholder=\"Enter company name\"\n            className=\"search-input\"\n            />\n            {suggestions.length > 0 && (<div className=\"suggestions-container\">\n                {suggestions.map((suggestion, index) => (\n                <div key={index} className=\"suggestion-row\" onClick={() => onSuggestionClick(suggestion)}>\n                    <span className =\"company-name\">{suggestion}</span>\n                </div>\n                ))}\n            </div>)}\n        </div>\n        <Line data={combinedData}/>\n        {/* {quarterToArticles.length > 0 && (\n        <div>\n            <h2>Articles</h2>\n            <ul>\n                {quarterToArticles.map(quarterArticles => (\n                    <li>\n                        {quarterArticles.map(article => (\n                        <div>\n                            <h3>Article from {article.publisher.title}</h3>\n                            <ul>\n                                <li>{article.title}</li>\n                                <li><a href={article.url}>{article.url}</a></li>\n                                <li>{article[\"published date\"]}</li>\n                            </ul>\n                        </div>\n                    ))}\n                    </li>\n                ))}\n            </ul>\n        </div>\n        )} */}\n    </div>\n  );\n}\n\nexport default Home;\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":8,"column":3,"nodeType":"48","messageId":"49","endLine":8,"endColumn":7},{"ruleId":"46","severity":1,"message":"51","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":20},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["52"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'all' is defined but never used.","no-object-constructor"]