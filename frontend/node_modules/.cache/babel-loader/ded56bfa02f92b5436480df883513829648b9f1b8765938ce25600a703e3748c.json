{"ast":null,"code":"var _jsxFileName = \"/Users/benliu/econo-sentimental-analysis/frontend/src/pages/home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './home.css';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst companyNames = ['Apple', 'Microsoft', 'Google', 'Amazon', 'Meta', 'Tesla', 'Goldman Sachs'];\nconst metrics = ['Close', 'Revenues'\n// ... other metrics\n];\n\nfunction Home() {\n  _s();\n  const [companyName, setCompanyName] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [combinedData, setCombinedData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [metric, setMetric] = useState(metrics[0]);\n\n  // useEffect to handle changes in companyName and metric\n  useEffect(() => {\n    if (companyName && metric) {\n      setIsLoading(true);\n      runAnalysis();\n    }\n  }, [companyName, metric]);\n  const handleMetricChange = event => {\n    setMetric(event.target.value);\n  };\n  const handleInputChange = event => {\n    const inputValue = event.target.value;\n    setCompanyName(inputValue);\n    if (inputValue.length > 0) {\n      const regex = new RegExp(`^${inputValue}`, 'i');\n      setSuggestions(companyNames.sort().filter(v => regex.test(v)));\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const onSuggestionClick = value => {\n    setCompanyName(value);\n    setSuggestions([]);\n  };\n  const runAnalysis = async () => {\n    try {\n      const response = await axios.get(`/get_articles_by_quarter?company_name=${encodeURIComponent(companyName)}`);\n      const all_clean_data = response.data;\n      await generateGraph(metric, all_clean_data);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const generateGraph = async (metric, all_clean_data) => {\n    try {\n      const data = all_clean_data[\"data\"];\n      const predictions = all_clean_data[\"predictions\"];\n      console.log(data['x_vals']);\n      console.log(predictions['x_vals']);\n      const allQuarters = data[\"x_vals\"].concat(predictions[\"x_vals\"]);\n      const dataFromDataFrame1 = {\n        datasets: [{\n          label: data['y_label'],\n          data: data['vals'],\n          // This should be your actual data\n          borderColor: 'rgb(255, 99, 132)',\n          // Color for Dataset 1\n          backgroundColor: 'rgba(255, 99, 132, 0.5)'\n        }]\n      };\n      const arr = Array(allQuarters.length - 3).fill(null).concat([data['vals'][data['vals'].length - 1]]);\n      const dataFromDataFrame2 = {\n        datasets: [{\n          label: predictions['y_label'],\n          data: arr.concat(predictions['vals']),\n          // This should be your actual data\n          borderColor: 'rgb(54, 162, 235)',\n          // Color for Dataset 2\n          backgroundColor: 'rgba(54, 162, 235, 0.5)'\n        }]\n      };\n      setCombinedData({\n        labels: allQuarters,\n        // make sure allQuarters is an array of labels\n        datasets: [...dataFromDataFrame1.datasets, ...dataFromDataFrame2.datasets]\n      });\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n    }\n  };\n  //   const generateGraph = async (metric, all_clean_data) => {\n  //     // ... Logic to generate graph based on metric and clean data\n  //     // Remember to handle any potential errors or exceptions\n  //     setCombinedData({\n  //       // ... Updated data based on the metric\n  //     });\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `search-container ${companyName ? 'at-top' : 'centered'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo\",\n        src: \"/context-ai-logo.png\",\n        alt: \"Context AI Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"search-heading\",\n        children: \"Input a company name below!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: companyName,\n        onChange: handleInputChange,\n        placeholder: \"Enter company name\",\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggestions-container\",\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion-row\",\n          onClick: () => onSuggestionClick(suggestion),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"company-name\",\n            children: suggestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `metric-selector ${companyName ? '' : 'hidden'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"metric-select\",\n          children: \"Choose a metric: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"metric-select\",\n          value: metric,\n          onChange: handleMetricChange,\n          children: metrics.map((m, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: m,\n            children: m\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: combinedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"d54ZXmryv5ziJ7yt/4mvbP/raf4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","companyNames","metrics","Home","_s","companyName","setCompanyName","suggestions","setSuggestions","isLoading","setIsLoading","combinedData","setCombinedData","labels","datasets","metric","setMetric","runAnalysis","handleMetricChange","event","target","value","handleInputChange","inputValue","length","regex","RegExp","sort","filter","v","test","onSuggestionClick","response","get","encodeURIComponent","all_clean_data","data","generateGraph","error","console","predictions","log","allQuarters","concat","dataFromDataFrame1","label","borderColor","backgroundColor","arr","Array","fill","dataFromDataFrame2","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","map","suggestion","index","onClick","htmlFor","id","m","_c","$RefreshReg$"],"sources":["/Users/benliu/econo-sentimental-analysis/frontend/src/pages/home/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './home.css';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst companyNames = [\n  'Apple',\n  'Microsoft',\n  'Google',\n  'Amazon',\n  'Meta',\n  'Tesla',\n  'Goldman Sachs',\n];\n\nconst metrics = [\n  'Close',\n  'Revenues',\n  // ... other metrics\n];\n\nfunction Home() {\n  const [companyName, setCompanyName] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [combinedData, setCombinedData] = useState({ labels: [], datasets: [] });\n  const [metric, setMetric] = useState(metrics[0]);\n\n  // useEffect to handle changes in companyName and metric\n  useEffect(() => {\n    if (companyName && metric) {\n      setIsLoading(true);\n      runAnalysis();\n    }\n  }, [companyName, metric]);\n\n  const handleMetricChange = (event) => {\n    setMetric(event.target.value);\n  };\n\n  const handleInputChange = (event) => {\n    const inputValue = event.target.value;\n    setCompanyName(inputValue);\n    if (inputValue.length > 0) {\n      const regex = new RegExp(`^${inputValue}`, 'i');\n      setSuggestions(companyNames.sort().filter(v => regex.test(v)));\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionClick = (value) => {\n    setCompanyName(value);\n    setSuggestions([]);\n  };\n\n  const runAnalysis = async () => {\n    try {\n      const response = await axios.get(`/get_articles_by_quarter?company_name=${encodeURIComponent(companyName)}`);\n      const all_clean_data = response.data;\n      await generateGraph(metric, all_clean_data);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateGraph = async (metric, all_clean_data) => {\n    try {\n        const data = all_clean_data[\"data\"];\n        const predictions = all_clean_data[\"predictions\"];\n        console.log(data['x_vals']);\n        console.log(predictions['x_vals']);\n        const allQuarters = data[\"x_vals\"].concat(predictions[\"x_vals\"]);\n        const dataFromDataFrame1 = {\n            datasets: [\n              {\n                label: data['y_label'],\n                data: data['vals'], // This should be your actual data\n                borderColor: 'rgb(255, 99, 132)', // Color for Dataset 1\n                backgroundColor: 'rgba(255, 99, 132, 0.5)',\n              },\n            ],\n          };\n        const arr = Array(allQuarters.length-3).fill(null).concat([data['vals'][data['vals'].length-1]]);\n        const dataFromDataFrame2 = {\n        datasets: [\n            { \n            label: predictions['y_label'],\n            data: arr.concat(predictions['vals']), // This should be your actual data\n            borderColor: 'rgb(54, 162, 235)', // Color for Dataset 2\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\n            },\n        ],\n        };\n        setCombinedData({\n            labels: allQuarters, // make sure allQuarters is an array of labels\n            datasets: [...dataFromDataFrame1.datasets, ...dataFromDataFrame2.datasets],\n          });\n    } catch (error) {\n        console.error('Error fetching articles:', error);\n    }\n  }\n//   const generateGraph = async (metric, all_clean_data) => {\n//     // ... Logic to generate graph based on metric and clean data\n//     // Remember to handle any potential errors or exceptions\n//     setCombinedData({\n//       // ... Updated data based on the metric\n//     });\n//   };\n\n  return (\n    <div className=\"homepage\">\n      <div className={`search-container ${companyName ? 'at-top' : 'centered'}`}>\n        <img className=\"logo\" src=\"/context-ai-logo.png\" alt=\"Context AI Logo\" />\n        <h1 className=\"search-heading\">Input a company name below!</h1>\n        <input\n          type=\"text\"\n          value={companyName}\n          onChange={handleInputChange}\n          placeholder=\"Enter company name\"\n          className=\"search-input\"\n        />\n        {suggestions.length > 0 && (\n          <div className=\"suggestions-container\">\n            {suggestions.map((suggestion, index) => (\n              <div key={index} className=\"suggestion-row\" onClick={() => onSuggestionClick(suggestion)}>\n                <span className=\"company-name\">{suggestion}</span>\n              </div>\n            ))}\n          </div>\n        )}\n        <div className={`metric-selector ${companyName ? '' : 'hidden'}`}>\n          <label htmlFor=\"metric-select\">Choose a metric: </label>\n          <select id=\"metric-select\" value={metric} onChange={handleMetricChange}>\n            {metrics.map((m, index) => (\n              <option key={index} value={m}>{m}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      {isLoading && <div className=\"spinner\"></div>}\n      <Line data={combinedData} />\n      {/* Rest of your component */}\n    </div>\n  );\n}\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}